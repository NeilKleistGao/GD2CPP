/**
 * MIT License
 *
 * Copyright (c) 2023 Cunyuan(Holden) Gao 
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 **/

#include "gd2cpp_ast.h"

#ifdef TOOLS_ENABLED
#include "core/io/dir_access.h"
#include "gd2cpp_db.h"

namespace gd2cpp::cppast {
  Program::Program(): main_class{nullptr}, lead_comment{"/* Generated By GD2Cpp. DO NOT modify. */\n"} {
  }

  Program::~Program() {
    if (main_class != nullptr) {
      memdelete(main_class);
    }
  }

  Program* Program::create(Class* p_cls, const String& p_header, const String& p_source) {
    Program* prog = memnew(Program);
    prog->main_class = p_cls;
    prog->dependencies = p_cls->get_dependencies();
    prog->header_path = p_header;
    prog->source_path = p_source;
    return prog;
  }

  String Program::wrap_header(const String& p_content) {
    const String macro_name = "__" + header_path.get_file().replace(".", "_").to_upper() + "__";
    String res = "#ifndef " + macro_name + "\n";
    res += "#define " + macro_name + "\n";
    res += p_content;
    res += "#endif // " + macro_name;
    return res;
  }

  String Program::to_header() {
    String content = "";
    for (const auto& d: dependencies) {
      content += gen_include(d);
    }

    content += main_class->to_header();
    return lead_comment + wrap_header(content);
  }

  String Program::to_source() {
    String res = lead_comment;
    res += gen_include(header_path);
    res += main_class->to_source();
    return res;
  }

  String Program::gen_include(const String& p_filename) {
    if (GD2CppDB::get_singleton()->is_godot_class(p_filename)) {
      return "#include <godot_cpp/classes/" + p_filename  + ".hpp>\n";
    }
    else {
      Error err;
      Ref<FileAccess> to = FileAccess::open(p_filename, FileAccess::READ, &err);
      return "#include \"" + to->get_path_absolute()  + "\"\n";
    }
  }

  void Program::save() {
    save(header_path, to_header());
    save(source_path, to_source());
  }

  void Program::save(const String& p_filename, const String& p_content) {
    Error err;
    const String path = p_filename.get_base_dir();
    Ref<DirAccess> dir = DirAccess::open("res://", &err);
    if (!dir->dir_exists(path)) {
      err = dir->make_dir_recursive(path);
      if (err != OK) {
        print_error("Cannot create directory " + path + ".");
        return;
      }
    }

	  Ref<FileAccess> file = FileAccess::open(p_filename, FileAccess::WRITE, &err);
    if (err != OK) {
      print_error("Cannot save C++ file " + p_filename + ".");
    }
    else {
      file->store_string(p_content);
    }
  }

  Class* Class::create(const String& p_name) {
    Class* cls = memnew(Class);
    cls->name = p_name;
    return cls;
  }

  String Class::to_extends() const {
    String res = ": ";
    for (const auto& p: parents) {
      res += "public " + p + ", ";
    }

    return res.substr(0, res.length() - 2);
  }

  String Class::to_header() {
    String res = "class " + name + to_extends() + " {\n";
     // TODO
    return res + "};\n";
  }

  String Class::to_source() {
    return ""; // TODO
  }
} // namespace gd2cpp::cppast

#endif
